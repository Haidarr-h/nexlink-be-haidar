{
	"info": {
		"_postman_id": "ef0adef7-9541-4ebb-a637-56469abbf9da",
		"name": "prod-test-api",
		"description": "Testing all endpoints for Nexlink backend\n\nChange baseUrl variable to localhost or service link",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.status === \"success\") {\r",
									"    var userId = jsonData.data.user.id;\r",
									"    pm.environment.set(\"userId\", userId);\r",
									"    var email = jsonData.data.user.email;\r",
									"    pm.environment.set(\"email\", email);\r",
									"    var password = jsonData.data.user.password;\r",
									"    pm.environment.set(\"password\", password);\r",
									"    console.log(\"User ID set to environment variable: \" + userId);\r",
									"} else {\r",
									"    console.log(\"User registration failed.\");\r",
									"}\r",
									"\r",
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User registered successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test('response body data should have id property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const {data} = responseJson;\r",
									"\r",
									"    pm.expect(data.user).to.ownProperty('id');\r",
									"    pm.expect(data.user.id).to.not.equals('');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test40@example.com\",\n    \"password\": \"password123\",\n    \"fullName\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Email Already Registered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Email already registered!');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"{{email}}\",\n    \"password\": \"password123\",\n    \"fullName\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.status === \"success\") {\r",
									"    var token = jsonData.data.accessToken;\r",
									"    pm.environment.set(\"token\", token);\r",
									"    console.log(\"Token set to environment variable: \" + token);\r",
									"} else {\r",
									"    console.log(\"Login failed\");\r",
									"}\r",
									"\r",
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Login successful');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test('response body data should have token property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const {data} = responseJson;\r",
									"\r",
									"    pm.expect(data).to.ownProperty('accessToken');\r",
									"    pm.expect(data.noteId).to.not.equals('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - User Not Registered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('You are not registered!');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"notregistered@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Incorrect Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Your email or password is incorrect!');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Logout successful');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Password has been reset');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newPassword\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password - Denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Access denied. No token provided.');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"reset-token\",\n    \"newPassword\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('All users retrieved successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - No Users Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('No users found');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`User ${user.fullName} retrieved successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`User with ID: ${req.params.id} not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`User with ID: ${userId} not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"updateduser\",\n    \"email\": \"updated@example.com\",\n    \"fullName\": \"Updated User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Fill other email`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"updateduser\",\n    \"email\": \"{{email}}\",\n    \"fullName\": \"Updated User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Email Already Used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Email is already used!`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"updateduser\",\n    \"email\": \"{{usedEmail}}\",\n    \"fullName\": \"Updated User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User deleted successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"{{email}}\",\n    \"password\": \"password123\",\n    \"fullName\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('All projects retrieved successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Projects - No Projects Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`No Project found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project By ID - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${project.name} retrieved successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project By ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.status === \"success\") {\r",
									"    var projectId = jsonData.data.project.id;\r",
									"    pm.environment.set(\"projectId\", projectId);\r",
									"    console.log(\"Project ID set to environment variable:\" + projectId);\r",
									"    } else {\r",
									"        console.log('Project registration failed.');\r",
									"    }\r",
									"\r",
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${project.name} created successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Project Name\",\n    \"description\": \"project description\",\n    \"status\": \"completed\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"deadline\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${project.name} updated successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Project Name\",\n    \"description\": \"Updated project description\",\n    \"status\": \"completed\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"deadline\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Project Name\",\n    \"description\": \"Updated project description\",\n    \"status\": \"completed\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"deadline\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(``${project.name} deleted successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All Tasks - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('All tasks retrieved successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tasks - No Tasks Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`No tasks found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task by ID - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${task.title} retrieved successfully);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task by ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Task with ID: 999 was not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.status === \"success\") {\r",
									"    var taskId = jsonData.data.task.id;\r",
									"    pm.environment.set(\"taskId\", taskId);\r",
									"    console.log(\"Task ID set to environment variable: \" + taskId);\r",
									"} else {\r",
									"    console.log(\"Task registration failed.\");\r",
									"}\r",
									"\r",
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`New Task created successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test('response body data should have token property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const {data} = responseJson;\r",
									"\r",
									"    pm.expect(data.Project).to.not.equals('');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Task\",\r\n    \"description\": \"Task description\",\r\n    \"status\": \"in-progress\",\r\n    \"startDate\": \"2024-01-01\",\r\n    \"endDate\": \"2024-12-31\",\r\n    \"priority\": \"high\",\r\n    \"projectId\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${task.title} updated successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Task\",\n    \"description\": \"Updated description\",\n    \"status\": \"completed\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Task with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Task\",\n    \"description\": \"Updated description\",\n    \"status\": \"completed\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${task.title} deleted successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Task with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add Users to Projects",
			"item": [
				{
					"name": "Get Project Users - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Project retrieved successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project Users - Project Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/999/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"999",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project Users - No Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`No users found for ${project.name}`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId2}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId2}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Project - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${user.fullName} added to ${project.name}`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Project - Project Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 25\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/999/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"999",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Project - User Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Project - Already Added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${user.fullName} is already added to the project`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 25\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Project - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User removed from project successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Project - Project Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/999/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"999",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Project - User Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Project - User Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${user.fullName} is already removed from the project`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Projects by User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`All task(s) for ${user.fullName} retrieved successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Projects by User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/user/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"user",
								"999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add Tasks to Projects/Users",
			"item": [
				{
					"name": "Get Tasks by User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`All task(s) for ${user.fullName} retrieved successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks by User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/user/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"user",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks by Project - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('All task(s) on the New Project retrieved successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/project/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"project",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks by Project - Project Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Project with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/project/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"project",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks by Project - Task Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`No tasks found for ${project.name}`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/project/12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"project",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Task- Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${user.fullName} added to ${project.name}`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Task - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Task with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 25\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/999/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"999",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Task - User Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 999\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"users",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User to Task - Already Added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${user.fullName} is already added to the project`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 25\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Task - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User removed from task successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Task - Project Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`Task with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/999/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"999",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Task - User Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(`User with ID: 999 not found`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"users",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Task - User Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('error');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${user.fullName} is already removed from the project`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utils",
			"item": [
				{
					"name": "Utils - Create Used Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.status === \"success\") {\r",
									"    var userId = jsonData.data.user.id;\r",
									"    pm.environment.set(\"usedId\", userId);\r",
									"    var email = jsonData.data.user.email;\r",
									"    pm.environment.set(\"usedEmail\", email);\r",
									"    var password = jsonData.data.user.password;\r",
									"    pm.environment.set(\"password\", password);\r",
									"    console.log(\"User ID set to environment variable: \" + userId);\r",
									"} else {\r",
									"    console.log(\"User registration failed.\");\r",
									"}\r",
									"\r",
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('User registered successfully');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test('response body data should have id property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const {data} = responseJson;\r",
									"\r",
									"    pm.expect(data.user).to.ownProperty('id');\r",
									"    pm.expect(data.user.id).to.not.equals('');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"usedemail@example.com\",\n    \"password\": \"password123\",\n    \"fullName\": \"Test User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Utils - Delete Used Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`User ${user.fullName} deleted successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{usedId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{usedId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Utils - Create Project No Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.status === \"success\") {\r",
									"    var projectId = jsonData.data.project.id;\r",
									"    pm.environment.set(\"projectId2\", projectId);\r",
									"    console.log(\"Project ID set to environment variable:\" + projectId);\r",
									"    } else {\r",
									"        console.log('Project registration failed.');\r",
									"    }\r",
									"\r",
									"pm.test('response status code should have 400 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(`${project.name} created successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Project Name\",\n    \"description\": \"project description\",\n    \"status\": \"completed\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"deadline\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project - Success Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    // pm.expect(responseJson.message).to.equals(``${project.name} deleted successfully`);\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{projectId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"projects",
								"{{projectId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chats",
			"item": [
				{
					"name": "Create Group Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('response status code should be 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('response body should be an object', function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct properties', function () {",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.equal('New Group Chat has been created');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"pm.test('response body data should have id property and not be empty', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.id).to.not.be.empty;",
									"    pm.environment.set('groupId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"groupName\": \"Project Alpha\",\n  \"members\": [\"3590a3be-9cda-4c6b-b1ed-7aaae8e0087f\", \"001d35fb-5751-4bc0-8411-d7be75b124a0\", \"92d10892-ecf4-4be0-9a56-9ed4e7f60cb0\"],\n  \"chatType\": \"GROUP\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/chats/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chats",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Group Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should be 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('response body should be an object', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct properties', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.equal(`Group Chat with id ${pm.environment.get('groupId')} has been deleted`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/chats/groups/{{groupId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chats",
								"groups",
								"{{groupId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('response status code should be 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('response body should be an object', function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct properties', function () {",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.equal('Your Group Chat with the latest chat has been retrieved');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/chats?page=1&take=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chats"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "take",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Group Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('response status code should be 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('response body should be an object', function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct properties', function () {",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.equal(`GroupChat with id ${pm.environment.get('groupId')} has been retrieved`);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/chats/groups/{{groupId}}?page=1&take=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chats",
								"groups",
								"{{groupId}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "take",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Send New Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('response status code should be 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('response body should be an object', function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct properties', function () {",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.equal('New message has been created');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"pm.test('response body data should have id property and not be empty', function () {",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.id).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Hello, team!\",\n  \"chatType\": \"GROUP\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/chats/groups/{{groupId}}/message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chats",
								"groups",
								"{{groupId}}",
								"message"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://nexlink-be-57s6wxqnvq-et.a.run.app"
		},
		{
			"value": "",
			"type": "default"
		}
	]
}